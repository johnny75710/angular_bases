FormsModule -> Importamos en nuestro módulo el módulo de formularios.
               Con (ngSubmit en la etiqueta form es un evento personalizado para formularios). al darle al botón de submit,
               nos ejecuta el método especificado en la tarjeta form
               
               NgModel -> 2 way data binding

[] -> Establecer valor
() -> Emitir eventos

@Input -> se usa para emitir propiedades de un componente padre a componentes hijos. Con @Input() propiedadAMandar
En el html del componente hijo pondremos [propiedadAMandar] = "propiedadAMandar"

@Output -> emite un evento desde el hijo hacia el padre. En el .ts del hijo hacemos   
           @Output() onNuevoAlgo: EventEmitter<any> = new EventEmitter(); y emitimos el evento
           ahora le pasamos el dato a emitir this.onNuevoAlgo.emit('loquesea')
           En la etiqueta del componente hijo, ponemos (onNuevoAlgo) = metodoPadre( $event )
           En el .ts del padre mediante un método n este caso metodoPadre() trabajamos el evento del hijo ya en el padre.

Servicios -> Podemos trabajar los sercicios tanto de manera global como modular, lo usamos para trabajar con los datos de la
             aplicación. 
             Para crear un servicio usamos ng g s nombre.service.ts
             En el módulo en el que se usa el servicio, importamos con providers el servicio
             Populamos el servicio con los datos, por ejemplo una arreglo de nombre comidas
             Importamos el servicio en un componente con constructor(private nombreServicio: NombreServicio)
             Ahora en el componente, con un getComidas(): any{
                return this.nombreServicio.comidas;
             } 
